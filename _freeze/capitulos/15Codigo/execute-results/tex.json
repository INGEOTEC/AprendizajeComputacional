{
  "hash": "5a2433ba32eb220753a30e34f8037831",
  "result": {
    "markdown": "# Código {#sec-clasificador-bayesiano-gausiano}\n\nEl **objetivo** de este apéndice es describir algunas de las clases y métodos\nde Python utilizadas en el curso. \n\n## Paquetes usados {.unnumbered}\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\nfrom scipy.stats import multivariate_normal\nfrom scipy.special import logsumexp\nimport numpy as np\n```\n:::\n\n\n## Clasificador Bayesiano Gausiano\n\n```python\nclass GaussianBayes(object):\n    def __init__(self, naive=False) -> None:\n        self._naive = naive\n\n    @property\n    def naive(self):\n        return self._naive\n    \n    @property\n    def labels(self):\n        return self._labels\n\n    @labels.setter\n    def labels(self, labels):\n        self._labels = labels        \n```\n\n### Estimación de Parámetros\n\n```python\n    def fit(self, X, y):\n        self.prior = y\n        self.likelihood = (X, y)\n        return self\n```\n\n```python\n    @property\n    def prior(self):\n        return self._prior\n\n    @prior.setter\n    def prior(self, y):\n        labels, counts = np.unique(y, return_counts=True)\n        prior = counts / counts.sum()        \n        self.labels = labels\n        self._prior = np.log(prior)\n```\n\n\n```python\n    @property\n    def likelihood(self):\n        return self._likelihood\n\n    @likelihood.setter\n    def likelihood(self, D):\n        X, y = D\n        likelihood = []\n        for k in self.labels:\n            mask = y == k\n            mu = np.mean(X[mask], axis=0)\n            if self.naive:\n                cov = np.var(X[mask], axis=0, ddof=1)\n            else:\n                cov = np.cov(X[mask], rowvar=False)\n            _ = multivariate_normal(mean=mu,\n                                    cov=cov,\n                                    allow_singular=True)\n            likelihood.append(_)\n        self._likelihood = likelihood\n```\n\n### Predicción\n\n```python\n    def predict(self, X):\n        hy = self.predict_log_proba(X)\n        _ = np.argmax(hy, axis=1)\n        return self.labels[_]\n```\n\n```python\n    def predict_proba(self, X):\n        _ = self.predict_log_proba(X)\n        return np.exp(_)\n```\n\n```python\n    def predict_log_proba(self, X):\n        log_ll = np.vstack([m.logpdf(X) \n                            for m in self.likelihood]).T\n        prior = self.prior\n        posterior = log_ll + prior\n        evidence = np.atleast_2d(logsumexp(posterior,\n                                           axis=1)).T\n        return posterior - evidence\n```\n\n### Uso\n\n```python\nbayes = GaussianBayes().fit(T, y_t)\nhy = bayes.predict(G)\n```\n\n",
    "supporting": [
      "15Codigo_files/figure-pdf"
    ],
    "filters": []
  }
}